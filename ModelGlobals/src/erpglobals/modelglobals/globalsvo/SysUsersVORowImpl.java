package erpglobals.modelglobals.globalsvo;

import erpglobals.modelglobals.ERPGlobalPLSQLClass;
import erpglobals.modelglobals.ERPUserAttribute;
import erpglobals.modelglobals.globalsvo.common.SysUsersVORow;

import java.sql.Blob;
import java.sql.Date;
import java.sql.Timestamp;

import oracle.jbo.JboException;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 23 14:17:44 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SysUsersVORowImpl extends ViewRowImpl implements SysUsersVORow {


    public static final int ENTITY_SYSUSERS = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        UserId,
        UserName,
        UserType,
        Passwordd,
        IsLock,
        UserCode,
        ScanPath,
        Email,
        SavePath,
        MobileNo,
        CnicNo,
        LockDate,
        ExpiryDate,
        IsExpired,
        txtErpConfirmPassword,
        txtErpNewPassword,
        txtErpPwdStrength,
        txtErpCurrentPassword,
        CitySno,
        CountrySno,
        CreatedBy,
        CreatedDate,
        Dob,
        LastLoginDate;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int USERID = AttributesEnum.UserId.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int USERTYPE = AttributesEnum.UserType.index();
    public static final int PASSWORDD = AttributesEnum.Passwordd.index();
    public static final int ISLOCK = AttributesEnum.IsLock.index();
    public static final int USERCODE = AttributesEnum.UserCode.index();
    public static final int SCANPATH = AttributesEnum.ScanPath.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int SAVEPATH = AttributesEnum.SavePath.index();
    public static final int MOBILENO = AttributesEnum.MobileNo.index();
    public static final int CNICNO = AttributesEnum.CnicNo.index();
    public static final int LOCKDATE = AttributesEnum.LockDate.index();
    public static final int EXPIRYDATE = AttributesEnum.ExpiryDate.index();
    public static final int ISEXPIRED = AttributesEnum.IsExpired.index();
    public static final int TXTERPCONFIRMPASSWORD = AttributesEnum.txtErpConfirmPassword.index();
    public static final int TXTERPNEWPASSWORD = AttributesEnum.txtErpNewPassword.index();
    public static final int TXTERPPWDSTRENGTH = AttributesEnum.txtErpPwdStrength.index();
    public static final int TXTERPCURRENTPASSWORD = AttributesEnum.txtErpCurrentPassword.index();
    public static final int CITYSNO = AttributesEnum.CitySno.index();
    public static final int COUNTRYSNO = AttributesEnum.CountrySno.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int DOB = AttributesEnum.Dob.index();
    public static final int LASTLOGINDATE = AttributesEnum.LastLoginDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SysUsersVORowImpl() {
    }

    /**
     * Gets SysUsers entity object.
     * @return the SysUsers
     */
    public EntityImpl getSysUsers() {
        return (EntityImpl) getEntity(ENTITY_SYSUSERS);
    }

    /**
     * Gets the attribute value for USER_ID using the alias name UserId.
     * @return the USER_ID
     */
    public Integer getUserId() {
        return (Integer) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as attribute value for USER_ID using the alias name UserId.
     * @param value value to set the USER_ID
     */
    public void setUserId(Integer value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for USER_NAME using the alias name UserName.
     * @return the USER_NAME
     */
    public String getUserName() {
        return (String) getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for USER_NAME using the alias name UserName.
     * @param value value to set the USER_NAME
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for USER_TYPE using the alias name UserType.
     * @return the USER_TYPE
     */
    public String getUserType() {
        return (String) getAttributeInternal(USERTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for USER_TYPE using the alias name UserType.
     * @param value value to set the USER_TYPE
     */
    public void setUserType(String value) {
        setAttributeInternal(USERTYPE, value);
    }

    /**
     * Gets the attribute value for PASSWORDD using the alias name Passwordd.
     * @return the PASSWORDD
     */
    public String getPasswordd() {
        return (String) getAttributeInternal(PASSWORDD);
    }

    /**
     * Sets <code>value</code> as attribute value for PASSWORDD using the alias name Passwordd.
     * @param value value to set the PASSWORDD
     */
    public void setPasswordd(String value) {
        setAttributeInternal(PASSWORDD, value);
    }

    /**
     * Gets the attribute value for IS_LOCK using the alias name IsLock.
     * @return the IS_LOCK
     */
    public String getIsLock() {
        return (String) getAttributeInternal(ISLOCK);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_LOCK using the alias name IsLock.
     * @param value value to set the IS_LOCK
     */
    public void setIsLock(String value) {
        setAttributeInternal(ISLOCK, value);
    }


    /**
     * Gets the attribute value for USER_CODE using the alias name UserCode.
     * @return the USER_CODE
     */
    public String getUserCode() {
        return (String) getAttributeInternal(USERCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for USER_CODE using the alias name UserCode.
     * @param value value to set the USER_CODE
     */
    public void setUserCode(String value) {
        setAttributeInternal(USERCODE, value);
    }


    /**
     * Gets the attribute value for SCAN_PATH using the alias name ScanPath.
     * @return the SCAN_PATH
     */
    public String getScanPath() {
        return (String) getAttributeInternal(SCANPATH);
    }

    /**
     * Sets <code>value</code> as attribute value for SCAN_PATH using the alias name ScanPath.
     * @param value value to set the SCAN_PATH
     */
    public void setScanPath(String value) {
        setAttributeInternal(SCANPATH, value);
    }

    /**
     * Gets the attribute value for EMAIL using the alias name Email.
     * @return the EMAIL
     */
    public String getEmail() {
        return (String) getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as attribute value for EMAIL using the alias name Email.
     * @param value value to set the EMAIL
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }

    /**
     * Gets the attribute value for SAVE_PATH using the alias name SavePath.
     * @return the SAVE_PATH
     */
    public String getSavePath() {
        return (String) getAttributeInternal(SAVEPATH);
    }

    /**
     * Sets <code>value</code> as attribute value for SAVE_PATH using the alias name SavePath.
     * @param value value to set the SAVE_PATH
     */
    public void setSavePath(String value) {
        setAttributeInternal(SAVEPATH, value);
    }

    /**
     * Gets the attribute value for MOBILE_NO using the alias name MobileNo.
     * @return the MOBILE_NO
     */
    public String getMobileNo() {
        return (String) getAttributeInternal(MOBILENO);
    }

    /**
     * Sets <code>value</code> as attribute value for MOBILE_NO using the alias name MobileNo.
     * @param value value to set the MOBILE_NO
     */
    public void setMobileNo(String value) {
        setAttributeInternal(MOBILENO, value);
    }

    /**
     * Gets the attribute value for CNIC_NO using the alias name CnicNo.
     * @return the CNIC_NO
     */
    public String getCnicNo() {
        return (String) getAttributeInternal(CNICNO);
    }

    /**
     * Sets <code>value</code> as attribute value for CNIC_NO using the alias name CnicNo.
     * @param value value to set the CNIC_NO
     */
    public void setCnicNo(String value) {
        setAttributeInternal(CNICNO, value);
    }

    /**
     * Gets the attribute value for LOCK_DATE using the alias name LockDate.
     * @return the LOCK_DATE
     */
    public Date getLockDate() {
        return (Date) getAttributeInternal(LOCKDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCK_DATE using the alias name LockDate.
     * @param value value to set the LOCK_DATE
     */
    public void setLockDate(Date value) {
        setAttributeInternal(LOCKDATE, value);
    }

    /**
     * Gets the attribute value for EXPIRY_DATE using the alias name ExpiryDate.
     * @return the EXPIRY_DATE
     */
    public Date getExpiryDate() {
        return (Date) getAttributeInternal(EXPIRYDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for EXPIRY_DATE using the alias name ExpiryDate.
     * @param value value to set the EXPIRY_DATE
     */
    public void setExpiryDate(Date value) {
        setAttributeInternal(EXPIRYDATE, value);
    }

    /**
     * Gets the attribute value for IS_EXPIRED using the alias name IsExpired.
     * @return the IS_EXPIRED
     */
    public String getIsExpired() {
        return (String) getAttributeInternal(ISEXPIRED);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_EXPIRED using the alias name IsExpired.
     * @param value value to set the IS_EXPIRED
     */
    public void setIsExpired(String value) {
        setAttributeInternal(ISEXPIRED, value);
    }


    /**
     * Gets the attribute value for the calculated attribute txtErpConfirmPassword.
     * @return the txtErpConfirmPassword
     */
    public String gettxtErpConfirmPassword() {
        return (String) getAttributeInternal(TXTERPCONFIRMPASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute txtErpConfirmPassword.
     * @param value value to set the  txtErpConfirmPassword
     */
    public void settxtErpConfirmPassword(String value) {
        
        try {
            if (value==null ||value.trim().isEmpty()) {
               setAttributeInternal(TXTERPCONFIRMPASSWORD, null);
               return;
            } 
            if (!value.equals(value.trim())) {
                setAttributeInternal(TXTERPCONFIRMPASSWORD, null);
               JboException erpex=new JboException("Confirm Password can not contain contain space at start and end.");// Voucger Number is"+cs.getString(1));
               //erpex.setSeverity(JboException.SEVERITY_WARNING); 
               throw erpex;          
            }    
            setAttributeInternal(TXTERPCONFIRMPASSWORD, value.trim());
        } catch (NullPointerException e) {
            // TODO: Add catch code
            setAttributeInternal(TXTERPCONFIRMPASSWORD, null);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute txtErpNewPassword.
     * @return the txtErpNewPassword
     */
    public String gettxtErpNewPassword() {
        return (String) getAttributeInternal(TXTERPNEWPASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute txtErpNewPassword.
     * @param value value to set the  txtErpNewPassword
     */
    public void settxtErpNewPassword(String value) {
        settxtErpPwdStrength(0);
        doErpValidateNewPassword(value);
        setAttributeInternal(TXTERPNEWPASSWORD, value); 
    }

    /**
     * Gets the attribute value for the calculated attribute txtErpPwdStrength.
     * @return the txtErpPwdStrength
     */
    public Integer gettxtErpPwdStrength() {
        return (Integer) getAttributeInternal(TXTERPPWDSTRENGTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute txtErpPwdStrength.
     * @param value value to set the  txtErpPwdStrength
     */
    public void settxtErpPwdStrength(Integer value) {
        setAttributeInternal(TXTERPPWDSTRENGTH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute txtErpCurrentPassword.
     * @return the txtErpCurrentPassword
     */
    public String gettxtErpCurrentPassword() {
        return (String) getAttributeInternal(TXTERPCURRENTPASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute txtErpCurrentPassword.
     * @param value value to set the  txtErpCurrentPassword
     */
    public void settxtErpCurrentPassword(String value) {
        doValidateErpCurrentPassword(value);
        }

    /**
     * Gets the attribute value for CITY_SNO using the alias name CitySno.
     * @return the CITY_SNO
     */
    public Integer getCitySno() {
        return (Integer) getAttributeInternal(CITYSNO);
    }

    /**
     * Sets <code>value</code> as attribute value for CITY_SNO using the alias name CitySno.
     * @param value value to set the CITY_SNO
     */
    public void setCitySno(Integer value) {
        setAttributeInternal(CITYSNO, value);
    }

    /**
     * Gets the attribute value for COUNTRY_SNO using the alias name CountrySno.
     * @return the COUNTRY_SNO
     */
    public Integer getCountrySno() {
        return (Integer) getAttributeInternal(COUNTRYSNO);
    }

    /**
     * Sets <code>value</code> as attribute value for COUNTRY_SNO using the alias name CountrySno.
     * @param value value to set the COUNTRY_SNO
     */
    public void setCountrySno(Integer value) {
        setAttributeInternal(COUNTRYSNO, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public Integer getCreatedBy() {
        return (Integer) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(Integer value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATED_DATE using the alias name CreatedDate.
     * @return the CREATED_DATE
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_DATE using the alias name CreatedDate.
     * @param value value to set the CREATED_DATE
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for DOB using the alias name Dob.
     * @return the DOB
     */
    public Date getDob() {
        return (Date) getAttributeInternal(DOB);
    }

    /**
     * Sets <code>value</code> as attribute value for DOB using the alias name Dob.
     * @param value value to set the DOB
     */
    public void setDob(Date value) {
        setAttributeInternal(DOB, value);
    }

    /**
     * Gets the attribute value for LAST_LOGIN_DATE using the alias name LastLoginDate.
     * @return the LAST_LOGIN_DATE
     */
    public Date getLastLoginDate() {
        return (Date) getAttributeInternal(LASTLOGINDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_LOGIN_DATE using the alias name LastLoginDate.
     * @param value value to set the LAST_LOGIN_DATE
     */
    public void setLastLoginDate(Date value) {
        setAttributeInternal(LASTLOGINDATE, value);
    }

    public void doERPChangePassword() {
        //settxtErpPwdStrength(0);
        if (gettxtErpCurrentPassword()==null || gettxtErpCurrentPassword().trim().length()==0) {
           JboException erpex=new JboException("Please Enter Current Password.");// Voucger Number is"+cs.getString(1));
           throw erpex;          
        }
        if (gettxtErpNewPassword()==null || gettxtErpNewPassword().trim().length()==0) {
           JboException erpex=new JboException("Please Enter New Password.");// Voucger Number is"+cs.getString(1));
           throw erpex;          
       }
        
        if (gettxtErpConfirmPassword()==null  || gettxtErpConfirmPassword().trim().length()==0) {
           JboException erpex=new JboException("Please Enter Confirm Password.");// Voucger Number is"+cs.getString(1));
           throw erpex;          
        }
        if (gettxtErpNewPassword().equals(gettxtErpCurrentPassword())) {
           JboException erpex=new JboException("New Password and Current Password can not be same.");// Voucger Number is"+cs.getString(1));
           //erpex.setSeverity(JboException.SEVERITY_WARNING); 
           throw erpex;
        }
        if (!(gettxtErpNewPassword().equals(gettxtErpConfirmPassword())) ) {
           JboException erpex=new JboException("New Password and Confirm Password must be matched.");// Voucger Number is"+cs.getString(1));
           throw erpex;
       }
        
        //doErpValidateNewPassword(gettxtErpNewPassword());
        doValidateErpCurrentPassword(gettxtErpCurrentPassword());
        
        ERPUserAttribute erpua =
            ERPGlobalPLSQLClass.doFuncCheckPwdComplaxity(getDBTransaction(), getUserId(),
                                                         gettxtErpConfirmPassword().replace("'", "''''"));
        if (erpua.getErpLoginStatus().equals("ERPNO")) {
            setAttributeInternal(TXTERPCONFIRMPASSWORD, null);
            JboException erpex=new JboException(erpua.getErpErrorMessage());// Voucger Number is"+cs.getString(1));
            throw erpex;         
        }
        settxtErpPwdStrength(erpua.getErpPwdStrength());
        String erpconntype=ERPGlobalPLSQLClass.doErpGetConnTypeModel(getDBTransaction());
        String plsql="";
        if (erpconntype.equals("ERPORACLE")) {
            plsql =
            " begin update sys_users s " + "set is_expired='N',expiry_date=trunc(sysdate)+"+erpua.getErpPwdExpiryDays()+" where user_id=" +getUserId() + ";" +
            " update sys_user_password set is_active='N' where user_id="+getUserId()+";"+
            " insert into sys_user_password(user_password_sno,passwordd,password_date,IS_ACTIVE,user_id)"+" \n"+
            " values (seq_sys_user_password.nextval,DBMS_CRYPTO.encrypt (UTL_I18N.string_to_raw ('" + gettxtErpConfirmPassword()+"', 'AL32UTF8'),(6+ 256+ 4096),UTL_I18N.string_to_raw ('$rPl0G!NK$Ysyste', 'AL32UTF8')),sysdate,'Y',"+getUserId()+"); "+
            " insert into sys_user_password_history(PASSWORD_HISTORY_SNO,USER_ID,USER_PASSWORD,CHANGE_DATE)" +
            " values(seq_sys_user_password_history.nextval,"+getUserId()+","+
            " DBMS_CRYPTO.encrypt (UTL_I18N.string_to_raw ('" +gettxtErpConfirmPassword() +"', 'AL32UTF8'),(6+ 256+ 4096),UTL_I18N.string_to_raw ('$rPl0G!NK$Ysyste', 'AL32UTF8')),sysdate);"+
            " commit; end;";
          ERPGlobalPLSQLClass.doErpExecutePLSQLModel(getDBTransaction(), plsql,"Y");
      }
        else
        {
            plsql=" update sys_users s " + 
                    "set is_expired='N',expiry_date=date_add(sysdate(),interval "+erpua.getErpPwdExpiryDays()+" day) where user_id="+getUserId()+";";
            ERPGlobalPLSQLClass.doErpExecutePLSQLModel(getDBTransaction(), plsql,"Y");
            plsql =" update sys_user_password set is_active='N' where user_id="+getUserId()+";";
            ERPGlobalPLSQLClass.doErpExecutePLSQLModel(getDBTransaction(), plsql,"Y");
              
            plsql="insert into sys_user_password(user_id,passwordd,password_date,is_active) "+
                " values("+getUserId()+", AES_ENCRYPT('"+gettxtErpConfirmPassword()+"','$rPl0G!NK$Ysyste'),sysdate(),'Y');";
            ERPGlobalPLSQLClass.doErpExecutePLSQLModel(getDBTransaction(), plsql,"Y");
            
            plsql=" insert into sys_user_password_history(user_id,user_password,change_date) " + 
                    "values ("+getUserId()+",AES_ENCRYPT('" +gettxtErpConfirmPassword() + "','$rPl0G!NK$Ysyste'), sysdate())";
            System.out.println(plsql);
            ERPGlobalPLSQLClass.doErpExecutePLSQLModel(getDBTransaction(), plsql,"Y"); 
            
        }
        System.out.println(plsql);
    }
    
    public void doErpValidateNewPassword(String value) {        
        
        if (value==null ||value.trim().isEmpty()) {
           setAttributeInternal(TXTERPNEWPASSWORD, null);
           return;
        } 
        if (!value.equals(value.trim())) {
           setAttributeInternal(TXTERPNEWPASSWORD, null);
           JboException erpex=new JboException("New Password can not contain contain space at start and end.");// Voucger Number is"+cs.getString(1));
           //erpex.setSeverity(JboException.SEVERITY_WARNING); 
           throw erpex;          
       }
        try {
            
            ERPUserAttribute erpua =
                ERPGlobalPLSQLClass.doFuncCheckPwdComplaxity(getDBTransaction(), getUserId(),
                                                             value.trim().replace("'", "''''"));
            if (erpua.getErpLoginStatus().equals("ERPNO")) {
                //throw new JboException(erpua.getErpErrorMessage());
                setAttributeInternal(TXTERPNEWPASSWORD, null);
                JboException erpex=new JboException(erpua.getErpErrorMessage());// Voucger Number is"+cs.getString(1));
                //erpex.setSeverity(JboException.SEVERITY_WARNING); 
                throw erpex;
            }
            System.out.println("strength calling"+erpua.getErpPwdStrength());
            settxtErpPwdStrength(erpua.getErpPwdStrength());
        } catch (NullPointerException je) {
            // TODO: Add catch code
            je.printStackTrace();
        }
        
    }
    public void doValidateErpCurrentPassword(String value) {
        String erpconntype=ERPGlobalPLSQLClass.doErpGetConnTypeModel(getDBTransaction());
           String ErpSql="";
            String Erpresult="";
           if (erpconntype.equals("ERPORACLE")) {
             ErpSql="select count(1) cnt from sys_user_password where is_active='Y' and passwordd=DBMS_CRYPTO.encrypt (UTL_I18N.string_to_raw ('" +value+ "', 'AL32UTF8'),(6+ 256+ 4096),UTL_I18N.string_to_raw ('$rPl0G!NK$Ysyste', 'AL32UTF8')) and user_id="+getUserId();
             Erpresult=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(), ErpSql);
             
             System.out.println(Erpresult);
           }
           else {
               ErpSql="select count(1) cnt from sys_user_password where is_active='Y' and passwordd=AES_ENCRYPT('" + value + "','$rPl0G!NK$Ysyste') and user_id="+getUserId();
                Erpresult=ERPGlobalPLSQLClass.doExecuteSQLQueryModel(getDBTransaction(), ErpSql);
               System.out.println(Erpresult);
                              
           }
          if (Erpresult.equals("0")) {
           setAttributeInternal(TXTERPCURRENTPASSWORD, null);
           JboException erpex=new JboException("Your Current Password Is Incorrect.");// Voucger Number is"+cs.getString(1));
           throw erpex;                      
        }
        setAttributeInternal(TXTERPCURRENTPASSWORD, value);
        
    }
}